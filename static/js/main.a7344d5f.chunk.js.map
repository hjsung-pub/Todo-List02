{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onRemove","onToggle","id","text","checked","cn","onClick","TodoList","todos","map","App","setTodos","nextId","useRef","current","concat","alert","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7344d5f.chunk.js","sourcesContent":["import React from 'react';\nimport './scss/TodoTemplate.scss';\n\nexport default function TodoTemplate({children}) {\n    return (\n        <div className=\"TodoTemplate\">\n            <h1 className=\"app-title\">일정관리</h1>\n            <div className=\"content\">{children}</div>\n        </div>\n    )\n}\n","import React, { useState, useCallback } from 'react';\nimport {MdAdd} from 'react-icons/md';\nimport './scss/TodoInsert.scss';\n\nexport default function TodoInsert({onInsert}) {\n\n    const [value, setValue] = useState('');\n\n    const onChange = useCallback( //컴포넌트가 리렌더링 될때마다 함수를 새로 만드는 것이 아니라, 한 번 함수를 만들고 재 사용할 수 있도록 하기위해 사용\n        (e) => {\n            setValue(e.target.value);\n        },\n        []\n    );\n\n    const onSubmit = useCallback( //onSubmit은 enter를 눌러도 이벤트가 발생하지만 onClick은 keypress이벤트를 따로 작성 해야한다. \n        (e) => {\n            onInsert(value);\n            setValue(''); //value값 초기화\n\n            //submit 이벤트는 브라우저에서 새로고침을 발생시킨다.\n            //이를 방지하기 위해 이 함수를 호출\n            e.preventDefault();\n        },\n        [onInsert, value],\n    )\n\n    return (\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\n            <input placeholder=\"할 일을 입력하세요\" value={value} onChange={onChange} />\n            <button type=\"submit\">\n                <MdAdd/>\n            </button>\n        </form>\n    )\n}\n","import React from 'react';\nimport './scss/TodoList.scss';\nimport cn from 'classnames'; //조건부 스타일링을 위해 사용\nimport { MdCheckBoxOutlineBlank, MdCheckBox, MdRemoveCircle } from 'react-icons/md'; //아이콘 사용\n\nexport default function TodoListItem({todo, onRemove, onToggle}) {\n    const {id, text, checked} = todo;\n\n    return (\n        <li className=\"TodoListItem\">\n            {/* <div className=\"checkbox\"> */}\n            <div className={cn('checkbox', {checked})} onClick={() => onToggle(id)}>\n            {checked ? <MdCheckBox/>:  <MdCheckBoxOutlineBlank/>}\n                <label className=\"text\">{text}</label>\n            </div>\n            <button type=\"button\" className=\"remove\" onClick={() => onRemove(id)}>\n                <MdRemoveCircle/>\n            </button>\n        </li>\n    )\n}\n","import React from 'react';\nimport TodoListItem from './TodoListItem';\n\nexport default function TodoList({todos, onRemove, onToggle}) {\n    return (\n        <ul className=\"TodoList\">\n            { todos.map( todo => \n                <TodoListItem todo={todo} key={todo.id} onRemove={onRemove} onToggle={onToggle}/>\n            ) }\n        </ul>\n    )\n}\n","import React, { useState, useRef, useCallback } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nexport default function App() {\n\n  const [todos, setTodos] = useState([\n    {\n      id : 1,\n      text : '리액트의 기초 알아보기',\n      checked : true\n    },\n    {\n      id : 2,\n      text : '리액트의 스타일링 해보기',\n      checked : false\n    },\n    {\n      id : 3,\n      text : '일정관리 앱 만들어보기',\n      checked : false\n    }\n  ]);\n  \n  //고유값으로 사용될 id\n  //ref를 사용하여 변수 담기\n  const nextId = useRef(4)\n  \n  const onInsert = useCallback(\n    (text) => {\n      const todo = {\n        id : nextId.current,\n        text,\n        checked : false\n      };\n      if( text === ''){ alert(\"할 일을 입력해주세요.\"); return}\n      setTodos(todos.concat(todo));\n      nextId.current += 1;\n    },\n    [todos],\n  );\n\n  const onRemove = useCallback(\n\n    (id) => {\n      setTodos(todos.filter((todo) => todo.id !== id));    \n    },\n    [todos],\n  )\n\n  const onToggle = useCallback(\n    (id) => {\n      setTodos(todos.map(todo => todo.id === id ? { ...todo, checked : !todo.checked} : todo )); \n    },\n    [todos],\n  )\n\n  return (\n    <div>\n      <TodoTemplate>\n        <TodoInsert onInsert={onInsert}/>\n        <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>\n      </TodoTemplate>\n    </div>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}